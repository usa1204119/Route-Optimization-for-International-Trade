import requests
from django.shortcuts import render
import folium
from folium.plugins import AntPath
from scgraph.geographs.marnet import marnet_geograph

def input_view(request):
    return render(request, 'input.html')

def calculate_route(request):
    if request.method == 'POST':
        origin_country = request.POST.get('origin_country')
        origin_port = request.POST.get('origin_port')
        dest_country = request.POST.get('dest_country')
        dest_port = request.POST.get('dest_port')

        # Get the shortest path between the provided ports using marnet_geograph
        output = marnet_geograph.get_shortest_path(
            origin_node={"latitude": 1.28, "longitude": 103.75},
            destination_node={"latitude": 13.10, "longitude": 100.91}
        )

        if output is None or 'coordinate_path' not in output:
            # Handle case where path couldn't be retrieved
            return render(request, 'error.html')

        # Create a map centered at the origin port
        map_center = output['coordinate_path'][0]  # Assume the first point is the origin
        mymap = folium.Map(location=map_center, zoom_start=5)

        # Add port icons for the origin and destination ports
        origin_icon_url = 'https://image.flaticon.com/icons/png/512/126/126538.png'
        dest_icon_url = 'https://image.flaticon.com/icons/png/512/3534/3534852.png'

        folium.Marker(
            output['coordinate_path'][0],
            icon=folium.features.CustomIcon(origin_icon_url, icon_size=(50, 50))
        ).add_to(mymap)

        folium.Marker(
            output['coordinate_path'][-1],
            icon=folium.features.CustomIcon(dest_icon_url, icon_size=(50, 50))
        ).add_to(mymap)

        # Create a line with arrows indicating the direction of the path
        path_points = output['coordinate_path']
        AntPath(locations=path_points, use_arrows=True, color='green').add_to(mymap)

        # Convert the map to HTML
        map_html = mymap._repr_html_()

        # Pass the map HTML to the template context
        context = {
            'map': map_html
        }

        # Render the template with the context
        return render(request, 'map.html', context)
    else:
        # Handle GET request
        return render(request, 'input.html')
